>>> abs(-3)
3
>>> abs(3+4j)
5.0


>>> list = [ True, True, True ]
>>> all(list)
True
>>> any(list)
True
>>> list = [ True, False, True ]
>>> all(list)
False
>>> any(list)
True


>>> items = [ "", "a string", 0, 1, [], {}]
>>> for i in items:
	print(i, bool(i))

 False
a string True
0 False
1 True
[] False
{} False


>>> chr(65)
'A'
>>> ord('A')
65


>>> with open('mymodule.py') as f:
        lines = f.read()
>>> code = compile(lines, 'mymodule.py', 'exec')
    # source, filename, option(exec -> source가 코드 // eval -> source가 수식 // single -> 하나의 상호적 문장)
>>> exec(code)
...


>>> x = complex(4, 2)
>>> x
(4+2j)


>>> dir([])
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__',
'__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__',
'__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__',
'__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__',
'__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__',
'__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy',
'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']


>>> help([].append)
Help on built-in function append:

append(object, /) method of builtins.list instance
    Append object to the end of the list.


>>> divmod(10, 3)
(3, 1)
>>> (10 // 3, 10 % 3)
(3, 1)


>>> seasons = [ 'sprint', 'summer', 'fall', 'winter' ]
>>> list(enumerate(seasons))
[(0, 'sprint'), (1, 'summer'), (2, 'fall'), (3, 'winter')]
>>> for i, str in enumerate(['aaa', 'bbb', 'ccc']):
	print(i, '->', str)

0 -> aaa
1 -> bbb
2 -> ccc


>>> eval("1+2")
3
>>> x = 1
>>> y = 1
>>> eval('x+y')
2
>>> eval("print('Hi!')")
Hi!
>>> exp = input("파이썬 수식을 입력하시오: ")
파이썬 수식을 입력하시오: 2**10
>>> eval(exp)
1024


>>> exec("y=2+3")
>>> y
5

# exec 함수는 eval함수와 조금 다르게, 수식 뿐만 아니라 모든 파이썬 문장을 받아서 실행함
# eval 함수는 값을 반환하지만, exec 함수는 값을 반환하지 않음

>>> state = '''
import math
def area_of_circle(r):
	return math.pi * r * r
'''
>>> exec(state)
>>> area_of_circle(5)
78.53981633974483

# exec 함수가 실행 시간이 오래 걸리면 compile 함수를 이용해 미리 코드 객체 생성 가능

>>> code = compile("print(x)", "<string>", "exec")
>>> x = 10
>>> exec(code)
10
>>> x = 20
>>> exec(code)
20


>>> str = input("실수 입력 >> ")
실수 입력 >> 12.345
>>> str
'12.345'
>>> value = float(str)
>>> value
12.345


>>> len("Hello World")
11
>>> len([1, 2, 3, 4, 5])
5
>>> len((1, 2, 3, 4, 5))
5


>>> list("Python!")
['P', 'y', 't', 'h', 'o', 'n', '!']


>>> max([1, 2, 3])
3
>>> max(('abc', 'def', 'ghi', 'jkl'))
'jkl'


>>> list(range(5))
[0, 1, 2, 3, 4]
>>> list(range(1, 5))
[1, 2, 3, 4]
>>> list(range(0, 5))
[0, 1, 2, 3, 4]
>>> list(range(0, 5, 2))
[0, 2, 4]


>>> sorted([5, 3, 2, 1, 4])
[1, 2, 3, 4, 5]


>>> sum([1, 2, 3, 4, 5])
15